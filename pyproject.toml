[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "orthw"
version = "0.0.1"
description = "orthw is a python app designed to simplify and speed up common tasks performed when processing ort scan results. It supports a number of commands, which can be run in the terminal."
authors = ["Helio Chissini de Castro <heliocastro@gmail.com>, Frank Viernau <frank_viernau@epam.com>"]
maintainers = ["Helio Chissini de Castro <heliocastro@gmail.com>, Frank Viernau <frank_viernau@epam.com>"]
readme = "README.md"
license = "BSD-Clause-3"

[tool.poetry.dependencies]
python = "^3.10"
click = "^8.1.3"
rich = "^13.1.0"
pyyaml = "^6.0"
dict2obj = "^1.2.0"
psycopg2-binary = "^2.9.5"
gitpython = "^3.1.31"
jinja2 = "^3.1.2"
fastapi = "^0.94.1"
pyaml = "^21.10.1"
python-dotenv = "^1.0.0"
appdirs = "^1.4.4"
uvicorn = {extras = ["standard"], version = "^0.21.0"}
pydantic = "^1.10.6"

[tool.poetry.group.dev.dependencies]
pytest-cov = "^4.0.0"
pre-commit = "^2.20.0"
isort = "^5.11.4"
pycodestyle = "^2.10.0"
pylint = "^2.15.8"
bandit = "^1.7.4"
pytest-mypy = "^0.10.3"
ruff = "^0.0.224"
mkdocs-material = "^9.1.0"
black = "^23.1.0"
types-pyyaml = "^6.0.12.8"
mypy = "^1.1.1"

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 120

[tool.black]
line-length = 120
include = '\.pyi?$'
exclude = '''
(
    /(
    \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    )/
    | foo.py          # also separately exclude a file named foo.py in
                    # the root of the project
)
'''

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
]
log_cli = true
log_cli_level = "INFO"
pythonpath = "src"

[tool.pylint.messages_control]
disable = [
    "abstract-method",
    "arguments-differ",
    "attribute-defined-outside-init",
    "blacklisted-name",
    "chained-comparison",
    "duplicate-code",
    "eval-used",
    "exec-used",
    "expression-not-assigned",
    "fixme",
    "global-statement",
    "invalid-name",
    "import-error",
    "logging-fstring-interpolation",
    "missing-docstring",
    "no-member",
    "no-name-in-module",
    "protected-access",
    "redefined-argument-from-local",
    "redefined-outer-name",
    "reimported",
    "stop-iteration-return",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-return-statements",
    "too-many-statements",
    "unexpected-special-method-signature",
    "unspecified-encoding"
]

[tool.mypy]
follow_imports = "silent"
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.bandit]
skips = ["B408"]

[tool.ruff]
line-length = 120

# Enable Pyflakes `E` and `F` codes by default.
select = ["E", "F"]
ignore = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
per-file-ignores = {}

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10
